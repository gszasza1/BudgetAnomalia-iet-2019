<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="csv2rdf" default="dist" basedir=".">

	<description>CSV2RDF utility</description>

	<!-- Global Properties -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="dist" location="dist"/>

	<!-- test -->
	<property name="test.dir" location="src/test" />
	<property name="report.dir" location="report" />
	<property name="web.classes.dir" location="${web.dir}/WEB-INF/classes" />




	<property name="project.name" value="csv2rdf"/>
	<property name="project.version" value="0.1"/>

	<property name="mainclass" value="com.complexible.common.csv.CSV2RDF"/>


	<path id="test.path">
		<pathelement location="test/"/>
	</path>

	<path id="project.class.path">
		<pathelement location="lib/"/>
		<pathelement location="${build}"/>
		<fileset dir="lib">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
	</path>

	<target name="clean" description="Clean up build files">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${test}"/>

	</target>

	<target name="init">
		<pathconvert targetos="unix" property="classpath" refid="project.class.path"/>
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<target name="compile" depends="init">
		<javac source="1.6" target="1.6" destdir="${build}" debug="yes" deprecation="yes">
			<classpath refid="project.class.path"/>
			<src path="${src}"/>
		</javac>
	</target>

	<target name="distfiles">
		<!-- Copy in lib files -->
		<mkdir dir="${dist}/lib"/>

		<copy todir="${dist}/lib">
			<fileset dir="lib">
				<include name="**/*.jar"/>
				<exclude name="**/${project.name}*.jar"/>
			</fileset>
		</copy>

		<copy todir="${dist}">
			<fileset dir=".">
				<include name="README.md"/>
				<include name="LICENSE.txt"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="compile, distfiles" description="Create a distribution">
		<!-- Generate relative classpath for jar file -->
		<property name="rlib" location="${basedir}/lib/"/>
		<pathconvert dirsep="/" pathsep=" " property="Class-Path">
			<map from="${rlib}/" to=""/>
			<map from="${rlib}\" to=""/>
			<path>
				<fileset dir="${rlib}">
					<include name="**/*.jar"/>
				</fileset>
			</path>
		</pathconvert>

		<!-- Make Jar file. -->
		<jar jarfile="${dist}/lib/${project.name}.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="${mainclass}"/>
				<attribute name="Class-Path" value="${Class-Path}"/>

			</manifest>
		</jar>
	</target>

	<target name="zip" depends="dist" description="Create zip file of the distribution">
		<zip destfile="${dist}/${project.name}-${DSTAMP}.zip">
			<zipfileset dir="${dist}">
				<include name="**/*"/>
				<exclude name="**/*.zip"/>
			</zipfileset>
		</zip>
	</target>


	<target name="junit" depends="clean">
		<mkdir dir="${report.dir}"/>
		<get dest="lib/junit.jar" src="http://search.maven.org/remotecontent?filepath=junit/junit/4.11/junit-4.11.jar"/>
		<get dest="lib/hamcrest.jar" src="https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest/2.1/hamcrest-2.1.jar"/>


		<junit printsummary="yes" haltonfailure="no">

			<classpath refid="test.path" />
			<classpath location="${build}" />
			<classpath location="lib/junit.jar" />
			<classpath location="lib/hamcrest.jar" />


			<formatter type="plain" />
			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${test.dir}">
					<include name="*.java" />
				</fileset>
			</batchtest>

		</junit>
	</target>

</project>